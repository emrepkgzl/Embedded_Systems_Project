
Embedded_systems_lecture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004160  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004300  08004300  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004308  08004308  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800430c  0800430c  0000530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004310  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000160  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efda  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002138  00000000  00000000  0001501a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00017158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b00  00000000  00000000  00017f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021923  00000000  00000000  00018a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001063c  00000000  00000000  0003a37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d438b  00000000  00000000  0004a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ed42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b64  00000000  00000000  0011ed88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001228ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042d0 	.word	0x080042d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080042d0 	.word	0x080042d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Mikrosaniye mertebesinde bekleme yapan fonksiyonu tanimla */
void delay (uint16_t time)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	/* Timer sayacini sifirla */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <delay+0x30>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Sayac fonksiyona girilen degere ulasana kadar bekle */
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80004ca:	bf00      	nop
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <delay+0x30>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3f9      	bcc.n	80004cc <delay+0x14>
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000074 	.word	0x20000074

080004ec <Set_Pin_Output>:
float Humidity = 0;
uint8_t Presence = 0;

/* Istenilen pini output olarak ayarlamak icin gerekli fonksiyonu tanimla */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000508:	887b      	ldrh	r3, [r7, #2]
 800050a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4619      	mov	r1, r3
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f001 fcb4 	bl	8001e88 <HAL_GPIO_Init>
}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <Set_Pin_Input>:

/* Istenilen pini input olarak ayarlamak icin gerekli fonksiyonu tanimla */
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f001 fc96 	bl	8001e88 <HAL_GPIO_Init>
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <DHT11_Start>:
#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

/* DHT sensorunun yanit vermesi icin gerekli verileri gonderecek fonksiyonu tanimla */
void DHT11_Start (void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	/* DHT ye bagli pini output olarak ayarla */
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);
 8000568:	2102      	movs	r1, #2
 800056a:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <DHT11_Start+0x3c>)
 800056c:	f7ff ffbe 	bl	80004ec <Set_Pin_Output>
	/* Pine logic low degeri gonder */
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <DHT11_Start+0x3c>)
 8000576:	f001 fe3b 	bl	80021f0 <HAL_GPIO_WritePin>
	/* DHT satasheet inde belirtildigi uzere 18ms bekle */
	delay (18000);
 800057a:	f244 6050 	movw	r0, #18000	@ 0x4650
 800057e:	f7ff ff9b 	bl	80004b8 <delay>
	/* Pine logic high degeri gonder */
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <DHT11_Start+0x3c>)
 8000588:	f001 fe32 	bl	80021f0 <HAL_GPIO_WritePin>
    /* 20 mikrosaniye bekle */
	delay (20);
 800058c:	2014      	movs	r0, #20
 800058e:	f7ff ff93 	bl	80004b8 <delay>
	/* DHT ye bagli pini input olarak ayarla */
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000592:	2102      	movs	r1, #2
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <DHT11_Start+0x3c>)
 8000596:	f7ff ffc7 	bl	8000528 <Set_Pin_Input>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020000 	.word	0x40020000

080005a4 <DHT11_Check_Response>:

/* DHT sensorunun yanitini kontrol edecek fonksiyonu tanimla */
uint8_t DHT11_Check_Response (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
	/* 40 mikrosaniye bekle */
	delay (40);
 80005ae:	2028      	movs	r0, #40	@ 0x28
 80005b0:	f7ff ff82 	bl	80004b8 <delay>
	/* Pin degeri logic low olursa asagida verilenleri yap */
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80005b4:	2102      	movs	r1, #2
 80005b6:	4811      	ldr	r0, [pc, #68]	@ (80005fc <DHT11_Check_Response+0x58>)
 80005b8:	f001 fe02 	bl	80021c0 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10e      	bne.n	80005e0 <DHT11_Check_Response+0x3c>
	{
		/* 80 mikrosaniye bekle */
		delay (80);
 80005c2:	2050      	movs	r0, #80	@ 0x50
 80005c4:	f7ff ff78 	bl	80004b8 <delay>
		/* Alinan yaniti degiskene kaydet */
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80005c8:	2102      	movs	r1, #2
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <DHT11_Check_Response+0x58>)
 80005cc:	f001 fdf8 	bl	80021c0 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <DHT11_Check_Response+0x38>
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e001      	b.n	80005e0 <DHT11_Check_Response+0x3c>
		else Response = -1;
 80005dc:	23ff      	movs	r3, #255	@ 0xff
 80005de:	71fb      	strb	r3, [r7, #7]
	}
	/* Pin degeri logic low olana kadar bekle */
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80005e0:	bf00      	nop
 80005e2:	2102      	movs	r1, #2
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <DHT11_Check_Response+0x58>)
 80005e6:	f001 fdeb 	bl	80021c0 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f8      	bne.n	80005e2 <DHT11_Check_Response+0x3e>

	/* Yanit degerini geri dondur */
	return Response;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40020000 	.word	0x40020000

08000600 <DHT11_Read>:

/* DHT sensorunden gelen verileri okuyacak fonksiyonu tanimla */
uint8_t DHT11_Read (void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	/* Gerekli degiskenleri tanimla */
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]
 800060a:	e037      	b.n	800067c <DHT11_Read+0x7c>
	{
		/* Pin degeri logic low olana kadar bekle */
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800060c:	bf00      	nop
 800060e:	2102      	movs	r1, #2
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <DHT11_Read+0x8c>)
 8000612:	f001 fdd5 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f8      	beq.n	800060e <DHT11_Read+0xe>
		/* 40 mikrosaniye bekle */
		delay (40);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f7ff ff4b 	bl	80004b8 <delay>
		/* Pin degeri logic low olursa asagida verilenleri yap */
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000622:	2102      	movs	r1, #2
 8000624:	4819      	ldr	r0, [pc, #100]	@ (800068c <DHT11_Read+0x8c>)
 8000626:	f001 fdcb 	bl	80021c0 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10e      	bne.n	800064e <DHT11_Read+0x4e>
		{
			/* Logic low degeri geldiginde dongu degerine gore biti kaydirip logic and ile kaydet */
			i&= ~(1<<(7-j));
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2201      	movs	r2, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	b25a      	sxtb	r2, r3
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	4013      	ands	r3, r2
 8000648:	b25b      	sxtb	r3, r3
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	e00b      	b.n	8000666 <DHT11_Read+0x66>
		}
		/* Logic high degeri geldiginde dongu degerine gore biti kaydirip logic or ile kaydet */
		else i|= (1<<(7-j));
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	f1c3 0307 	rsb	r3, r3, #7
 8000654:	2201      	movs	r2, #1
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	b25a      	sxtb	r2, r3
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	71fb      	strb	r3, [r7, #7]
		/* Pin degeri logic high olana kadar bekle */
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000666:	bf00      	nop
 8000668:	2102      	movs	r1, #2
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <DHT11_Read+0x8c>)
 800066c:	f001 fda8 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f8      	bne.n	8000668 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	3301      	adds	r3, #1
 800067a:	71bb      	strb	r3, [r7, #6]
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	2b07      	cmp	r3, #7
 8000680:	d9c4      	bls.n	800060c <DHT11_Read+0xc>
	}
	/* Elde edilen degeri geri dondur */
	return i;
 8000682:	79fb      	ldrb	r3, [r7, #7]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020000 	.word	0x40020000

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fd42 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f8f6 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fa54 	bl	8000b48 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006a0:	f000 f9bc 	bl	8000a1c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 fa26 	bl	8000af4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a8:	f000 f958 	bl	800095c <MX_ADC1_Init>
  MX_TIM7_Init();
 80006ac:	f000 f9ec 	bl	8000a88 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80006b0:	4867      	ldr	r0, [pc, #412]	@ (8000850 <main+0x1c0>)
 80006b2:	f002 fa9f 	bl	8002bf4 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80006b6:	2203      	movs	r2, #3
 80006b8:	4966      	ldr	r1, [pc, #408]	@ (8000854 <main+0x1c4>)
 80006ba:	4867      	ldr	r0, [pc, #412]	@ (8000858 <main+0x1c8>)
 80006bc:	f002 fe61 	bl	8003382 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 80006c0:	4866      	ldr	r0, [pc, #408]	@ (800085c <main+0x1cc>)
 80006c2:	f000 fe05 	bl	80012d0 <HAL_ADC_Start_IT>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80006cc:	4864      	ldr	r0, [pc, #400]	@ (8000860 <main+0x1d0>)
 80006ce:	f001 fd8f 	bl	80021f0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DHT11_Start();
 80006d2:	f7ff ff47 	bl	8000564 <DHT11_Start>
	   	  Presence = DHT11_Check_Response();
 80006d6:	f7ff ff65 	bl	80005a4 <DHT11_Check_Response>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b61      	ldr	r3, [pc, #388]	@ (8000864 <main+0x1d4>)
 80006e0:	701a      	strb	r2, [r3, #0]
	   	  Rh_byte1 = DHT11_Read ();
 80006e2:	f7ff ff8d 	bl	8000600 <DHT11_Read>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b5f      	ldr	r3, [pc, #380]	@ (8000868 <main+0x1d8>)
 80006ec:	701a      	strb	r2, [r3, #0]
	   	  Rh_byte2 = DHT11_Read ();
 80006ee:	f7ff ff87 	bl	8000600 <DHT11_Read>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b5d      	ldr	r3, [pc, #372]	@ (800086c <main+0x1dc>)
 80006f8:	701a      	strb	r2, [r3, #0]
	   	  Temp_byte1 = DHT11_Read ();
 80006fa:	f7ff ff81 	bl	8000600 <DHT11_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b5b      	ldr	r3, [pc, #364]	@ (8000870 <main+0x1e0>)
 8000704:	701a      	strb	r2, [r3, #0]
	   	  Temp_byte2 = DHT11_Read ();
 8000706:	f7ff ff7b 	bl	8000600 <DHT11_Read>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <main+0x1e4>)
 8000710:	701a      	strb	r2, [r3, #0]

	   	HAL_Delay(1500);
 8000712:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000716:	f000 fd73 	bl	8001200 <HAL_Delay>

		message[0] = 123;
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <main+0x1e8>)
 800071c:	227b      	movs	r2, #123	@ 0x7b
 800071e:	701a      	strb	r2, [r3, #0]
		message[1] = (channel1 / 10);
 8000720:	4b56      	ldr	r3, [pc, #344]	@ (800087c <main+0x1ec>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a56      	ldr	r2, [pc, #344]	@ (8000880 <main+0x1f0>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <main+0x1e8>)
 8000730:	705a      	strb	r2, [r3, #1]
		message[2] = (channel1 % 10);
 8000732:	4b52      	ldr	r3, [pc, #328]	@ (800087c <main+0x1ec>)
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	4b52      	ldr	r3, [pc, #328]	@ (8000880 <main+0x1f0>)
 8000738:	fba3 2301 	umull	r2, r3, r3, r1
 800073c:	08da      	lsrs	r2, r3, #3
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	1aca      	subs	r2, r1, r3
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <main+0x1e8>)
 800074c:	709a      	strb	r2, [r3, #2]

		HAL_Delay(1500);
 800074e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000752:	f000 fd55 	bl	8001200 <HAL_Delay>

		HAL_UART_Transmit(&huart2, (uint8_t*)message, 3, HAL_MAX_DELAY);
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	2203      	movs	r2, #3
 800075c:	4946      	ldr	r1, [pc, #280]	@ (8000878 <main+0x1e8>)
 800075e:	483e      	ldr	r0, [pc, #248]	@ (8000858 <main+0x1c8>)
 8000760:	f002 fd84 	bl	800326c <HAL_UART_Transmit>

		message[0] = 124;
 8000764:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <main+0x1e8>)
 8000766:	227c      	movs	r2, #124	@ 0x7c
 8000768:	701a      	strb	r2, [r3, #0]
		message[1] = (channel2 / 10);
 800076a:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <main+0x1f4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a44      	ldr	r2, [pc, #272]	@ (8000880 <main+0x1f0>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <main+0x1e8>)
 800077a:	705a      	strb	r2, [r3, #1]
		message[2] = (channel2 % 10);
 800077c:	4b41      	ldr	r3, [pc, #260]	@ (8000884 <main+0x1f4>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	4b3f      	ldr	r3, [pc, #252]	@ (8000880 <main+0x1f0>)
 8000782:	fba3 2301 	umull	r2, r3, r3, r1
 8000786:	08da      	lsrs	r2, r3, #3
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1aca      	subs	r2, r1, r3
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <main+0x1e8>)
 8000796:	709a      	strb	r2, [r3, #2]

		HAL_UART_Transmit(&huart2, (uint8_t*)message, 3, HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2203      	movs	r2, #3
 800079e:	4936      	ldr	r1, [pc, #216]	@ (8000878 <main+0x1e8>)
 80007a0:	482d      	ldr	r0, [pc, #180]	@ (8000858 <main+0x1c8>)
 80007a2:	f002 fd63 	bl	800326c <HAL_UART_Transmit>

	   	HAL_Delay(1500);
 80007a6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007aa:	f000 fd29 	bl	8001200 <HAL_Delay>
	   	HAL_ADC_Start_IT(&hadc1);
 80007ae:	482b      	ldr	r0, [pc, #172]	@ (800085c <main+0x1cc>)
 80007b0:	f000 fd8e 	bl	80012d0 <HAL_ADC_Start_IT>

	   	message[0] = 125;
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <main+0x1e8>)
 80007b6:	227d      	movs	r2, #125	@ 0x7d
 80007b8:	701a      	strb	r2, [r3, #0]
	   	message[1] = (Rh_byte1 / 10);
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <main+0x1d8>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <main+0x1f0>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <main+0x1e8>)
 80007ca:	705a      	strb	r2, [r3, #1]
	   	message[2] = (Rh_byte1 % 10);
 80007cc:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <main+0x1d8>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <main+0x1f0>)
 80007d2:	fba3 1302 	umull	r1, r3, r3, r2
 80007d6:	08d9      	lsrs	r1, r3, #3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <main+0x1e8>)
 80007e6:	709a      	strb	r2, [r3, #2]

	   	HAL_Delay(1500);
 80007e8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007ec:	f000 fd08 	bl	8001200 <HAL_Delay>

	   	HAL_UART_Transmit(&huart2, (uint8_t*)message, 3, HAL_MAX_DELAY);
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	2203      	movs	r2, #3
 80007f6:	4920      	ldr	r1, [pc, #128]	@ (8000878 <main+0x1e8>)
 80007f8:	4817      	ldr	r0, [pc, #92]	@ (8000858 <main+0x1c8>)
 80007fa:	f002 fd37 	bl	800326c <HAL_UART_Transmit>

		message[0] = 126;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <main+0x1e8>)
 8000800:	227e      	movs	r2, #126	@ 0x7e
 8000802:	701a      	strb	r2, [r3, #0]
		message[1] = (Temp_byte1 / 10);
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <main+0x1e0>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <main+0x1f0>)
 800080a:	fba2 2303 	umull	r2, r3, r2, r3
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <main+0x1e8>)
 8000814:	705a      	strb	r2, [r3, #1]
		message[2] = (Temp_byte1 % 10);
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <main+0x1e0>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <main+0x1f0>)
 800081c:	fba3 1302 	umull	r1, r3, r3, r2
 8000820:	08d9      	lsrs	r1, r3, #3
 8000822:	460b      	mov	r3, r1
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	440b      	add	r3, r1
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <main+0x1e8>)
 8000830:	709a      	strb	r2, [r3, #2]

	  HAL_UART_Transmit(&huart2, (uint8_t*)message, 3, HAL_MAX_DELAY);
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2203      	movs	r2, #3
 8000838:	490f      	ldr	r1, [pc, #60]	@ (8000878 <main+0x1e8>)
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <main+0x1c8>)
 800083c:	f002 fd16 	bl	800326c <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8000840:	2203      	movs	r2, #3
 8000842:	4904      	ldr	r1, [pc, #16]	@ (8000854 <main+0x1c4>)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <main+0x1c8>)
 8000846:	f002 fd9c 	bl	8003382 <HAL_UART_Receive_IT>
	  DHT11_Start();
 800084a:	bf00      	nop
 800084c:	e741      	b.n	80006d2 <main+0x42>
 800084e:	bf00      	nop
 8000850:	20000074 	.word	0x20000074
 8000854:	2000014c 	.word	0x2000014c
 8000858:	20000104 	.word	0x20000104
 800085c:	2000002c 	.word	0x2000002c
 8000860:	40021000 	.word	0x40021000
 8000864:	20000168 	.word	0x20000168
 8000868:	20000164 	.word	0x20000164
 800086c:	20000165 	.word	0x20000165
 8000870:	20000166 	.word	0x20000166
 8000874:	20000167 	.word	0x20000167
 8000878:	20000158 	.word	0x20000158
 800087c:	2000015c 	.word	0x2000015c
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	20000160 	.word	0x20000160

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	@ 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	@ 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fcee 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xd0>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008fc:	2332      	movs	r3, #50	@ 0x32
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fc89 	bl	8002224 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000918:	f000 fa44 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2101      	movs	r1, #1
 800093a:	4618      	mov	r0, r3
 800093c:	f001 feea 	bl	8002714 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000946:	f000 fa2d 	bl	8000da4 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	@ 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 8000970:	4a28      	ldr	r2, [pc, #160]	@ (8000a14 <MX_ADC1_Init+0xb8>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 8000982:	2201      	movs	r2, #1
 8000984:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 8000988:	2201      	movs	r2, #1
 800098a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 800099c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <MX_ADC1_Init+0xbc>)
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009bc:	f000 fc44 	bl	8001248 <HAL_ADC_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 f9ed 	bl	8000da4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ca:	2307      	movs	r3, #7
 80009cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80009d2:	2306      	movs	r3, #6
 80009d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009dc:	f000 fe88 	bl	80016f0 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009e6:	f000 f9dd 	bl	8000da4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009ea:	2308      	movs	r3, #8
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_ADC1_Init+0xb4>)
 80009f8:	f000 fe7a 	bl	80016f0 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a02:	f000 f9cf 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000002c 	.word	0x2000002c
 8000a14:	40012000 	.word	0x40012000
 8000a18:	0f000001 	.word	0x0f000001

08000a1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a2c:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <MX_TIM6_Init+0x68>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a32:	2231      	movs	r2, #49	@ 0x31
 8000a34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000a42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a4c:	f002 f882 	bl	8002b54 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a56:	f000 f9a5 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_TIM6_Init+0x64>)
 8000a68:	f002 fb20 	bl	80030ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a72:	f000 f997 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000074 	.word	0x20000074
 8000a84:	40001000 	.word	0x40001000

08000a88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000a98:	4a15      	ldr	r2, [pc, #84]	@ (8000af0 <MX_TIM7_Init+0x68>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60000-1;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000a9e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000aa2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000-1;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000aac:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000ab0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000aba:	f002 f84b 	bl	8002b54 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ac4:	f000 f96e 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_TIM7_Init+0x64>)
 8000ad6:	f002 fae9 	bl	80030ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 f960 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000bc 	.word	0x200000bc
 8000af0:	40001400 	.word	0x40001400

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f002 fb4e 	bl	80031cc <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f935 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000104 	.word	0x20000104
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a30      	ldr	r2, [pc, #192]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a22      	ldr	r2, [pc, #136]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0xe4>)
 8000bd4:	f001 fb0c 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000bde:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <MX_GPIO_Init+0xe8>)
 8000be0:	f001 fb06 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be4:	2302      	movs	r3, #2
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <MX_GPIO_Init+0xe4>)
 8000bfc:	f001 f944 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_GPIO_Init+0xe8>)
 8000c1a:	f001 f935 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	static uint8_t counter = 1;
	if(counter == 0)
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d114      	bne.n	8000c6e <HAL_ADC_ConvCpltCallback+0x3a>
	{
		// channel 1 sampling
		channel1 = 100 - ((HAL_ADC_GetValue(&hadc1)*10)/409);
 8000c44:	4817      	ldr	r0, [pc, #92]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000c46:	f000 fd31 	bl	80016ac <HAL_ADC_GetValue>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000c58:	fba3 2302 	umull	r2, r3, r3, r2
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x78>)
 8000c64:	6013      	str	r3, [r2, #0]
		counter = 1;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
	{
		// channel 2 sampling
		channel2 = 100 - ((HAL_ADC_GetValue(&hadc1)*10)/409);
		counter = 0;
	}
}
 8000c6c:	e013      	b.n	8000c96 <HAL_ADC_ConvCpltCallback+0x62>
		channel2 = 100 - ((HAL_ADC_GetValue(&hadc1)*10)/409);
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000c70:	f000 fd1c 	bl	80016ac <HAL_ADC_GetValue>
 8000c74:	4602      	mov	r2, r0
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000c82:	fba3 2302 	umull	r2, r3, r3, r2
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000c8c:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c8e:	6013      	str	r3, [r2, #0]
		counter = 0;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000001 	.word	0x20000001
 8000ca4:	2000002c 	.word	0x2000002c
 8000ca8:	a03c1689 	.word	0xa03c1689
 8000cac:	2000015c 	.word	0x2000015c
 8000cb0:	20000160 	.word	0x20000160

08000cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	/* interrupti tekrardan aktiflestir */
	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4924      	ldr	r1, [pc, #144]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000cc0:	4824      	ldr	r0, [pc, #144]	@ (8000d54 <HAL_UART_RxCpltCallback+0xa0>)
 8000cc2:	f002 fb5e 	bl	8003382 <HAL_UART_Receive_IT>
	/* hangi limit oldugunu kontrol et */
	if((Rx_data[0] - '0') == 1)
 8000cc6:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b31      	cmp	r3, #49	@ 0x31
 8000ccc:	d036      	beq.n	8000d3c <HAL_UART_RxCpltCallback+0x88>
	{
		/* char dan int e donustur */
		/*watering_time = (Rx_data[1] - '0') * 10;
		watering_time += (Rx_data[2] - '0');*/
	}
	else if((Rx_data[0] - '0') == 2)
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b32      	cmp	r3, #50	@ 0x32
 8000cd4:	d032      	beq.n	8000d3c <HAL_UART_RxCpltCallback+0x88>
			__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
			__HAL_TIM_SET_COUNTER(&htim7, 0);
			HAL_TIM_Base_Start_IT(&htim7);
		}*/
	}
	else if((Rx_data[0] - '0') == 3)
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b33      	cmp	r3, #51	@ 0x33
 8000cdc:	d02e      	beq.n	8000d3c <HAL_UART_RxCpltCallback+0x88>
	{
		/* char dan int e donustur */
		/*instant_watering_time = (Rx_data[1] - '0') * 10;
		instant_watering_time += (Rx_data[2] - '0');*/
	}
	else if((Rx_data[0] - '0') == 4)
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b34      	cmp	r3, #52	@ 0x34
 8000ce4:	d12a      	bne.n	8000d3c <HAL_UART_RxCpltCallback+0x88>
	{
		if((Rx_data[1] - '0') == 1)
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	2b31      	cmp	r3, #49	@ 0x31
 8000cec:	d115      	bne.n	8000d1a <HAL_UART_RxCpltCallback+0x66>
		{
			//do instant watering
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf4:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <HAL_UART_RxCpltCallback+0xa4>)
 8000cf6:	f001 fa7b 	bl	80021f0 <HAL_GPIO_WritePin>
			HAL_Delay(instant_watering_time * 1000);
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_UART_RxCpltCallback+0xa8>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d04:	fb02 f303 	mul.w	r3, r2, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fa79 	bl	8001200 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <HAL_UART_RxCpltCallback+0xa4>)
 8000d16:	f001 fa6b 	bl	80021f0 <HAL_GPIO_WritePin>
		}
		else
		{
			//do nothing
		}
		if((Rx_data[2] - '0') == 1)
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000d1c:	789b      	ldrb	r3, [r3, #2]
 8000d1e:	2b31      	cmp	r3, #49	@ 0x31
 8000d20:	d106      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x7c>
		{
			//turn on fan
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <HAL_UART_RxCpltCallback+0xa4>)
 8000d2a:	f001 fa61 	bl	80021f0 <HAL_GPIO_WritePin>
 8000d2e:	e005      	b.n	8000d3c <HAL_UART_RxCpltCallback+0x88>
		}
		else
		{
			//turn off fan
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <HAL_UART_RxCpltCallback+0xa4>)
 8000d38:	f001 fa5a 	bl	80021f0 <HAL_GPIO_WritePin>
		}
	}

	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4904      	ldr	r1, [pc, #16]	@ (8000d50 <HAL_UART_RxCpltCallback+0x9c>)
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <HAL_UART_RxCpltCallback+0xa0>)
 8000d42:	f002 fb1e 	bl	8003382 <HAL_UART_Receive_IT>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000014c 	.word	0x2000014c
 8000d54:	20000104 	.word	0x20000104
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	20000000 	.word	0x20000000

08000d60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	waiting_time--;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d72:	701a      	strb	r2, [r3, #0]
	if(waiting_time <= 0)
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10b      	bne.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f06f 0201 	mvn.w	r2, #1
 8000d84:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SET_COUNTER(&htim7, 0);
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim7);
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d90:	f001 ff98 	bl	8002cc4 <HAL_TIM_Base_Stop_IT>
	}
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000154 	.word	0x20000154
 8000da0:	200000bc 	.word	0x200000bc

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <HAL_ADC_MspInit+0xc0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d149      	bne.n	8000eb6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_ADC_MspInit+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480f      	ldr	r0, [pc, #60]	@ (8000ec8 <HAL_ADC_MspInit+0xc8>)
 8000e8a:	f000 fffd 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <HAL_ADC_MspInit+0xcc>)
 8000ea2:	f000 fff1 	bl	8001e88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	2012      	movs	r0, #18
 8000eac:	f000 ff23 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eb0:	2012      	movs	r0, #18
 8000eb2:	f000 ff3c 	bl	8001d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <HAL_TIM_Base_MspInit+0x70>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10e      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	4a16      	ldr	r2, [pc, #88]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000efe:	e01a      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d115      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_TIM_Base_MspInit+0x74>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2037      	movs	r0, #55	@ 0x37
 8000f2c:	f000 fee3 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f30:	2037      	movs	r0, #55	@ 0x37
 8000f32:	f000 fefc 	bl	8001d2e <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40001400 	.word	0x40001400

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d133      	bne.n	8000fd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <HAL_UART_MspInit+0x9c>)
 8000fc2:	f000 ff61 	bl	8001e88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2026      	movs	r0, #38	@ 0x26
 8000fcc:	f000 fe93 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd0:	2026      	movs	r0, #38	@ 0x26
 8000fd2:	f000 feac 	bl	8001d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f8bd 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8001050:	2203      	movs	r2, #3
 8001052:	4904      	ldr	r1, [pc, #16]	@ (8001064 <ADC_IRQHandler+0x18>)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <ADC_IRQHandler+0x1c>)
 8001056:	f002 f994 	bl	8003382 <HAL_UART_Receive_IT>
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <ADC_IRQHandler+0x20>)
 800105c:	f000 fa16 	bl	800148c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000014c 	.word	0x2000014c
 8001068:	20000104 	.word	0x20000104
 800106c:	2000002c 	.word	0x2000002c

08001070 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8001074:	2203      	movs	r2, #3
 8001076:	4904      	ldr	r1, [pc, #16]	@ (8001088 <USART2_IRQHandler+0x18>)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <USART2_IRQHandler+0x1c>)
 800107a:	f002 f982 	bl	8003382 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800107e:	4803      	ldr	r0, [pc, #12]	@ (800108c <USART2_IRQHandler+0x1c>)
 8001080:	f002 f9a4 	bl	80033cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000014c 	.word	0x2000014c
 800108c:	20000104 	.word	0x20000104

08001090 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <TIM7_IRQHandler+0x10>)
 8001096:	f001 fe44 	bl	8002d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000bc 	.word	0x200000bc

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001100 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010cc:	f7ff ffea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f003 f8c7 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fac9 	bl	8000690 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800110c:	08004310 	.word	0x08004310
  ldr r2, =_sbss
 8001110:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001114:	20000170 	.word	0x20000170

08001118 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <CAN1_RX0_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fdcb 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe2e 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fde3 	bl	8001d4a <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 fdab 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000004 	.word	0x20000004
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	2000016c 	.word	0x2000016c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000016c 	.word	0x2000016c

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c

08001248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e033      	b.n	80012c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fdca 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fb4a 	bl	8001934 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f023 0303 	bic.w	r3, r3, #3
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b6:	e001      	b.n	80012bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Start_IT+0x1a>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e0bd      	b.n	8001466 <HAL_ADC_Start_IT+0x196>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d018      	beq.n	8001332 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001310:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <HAL_ADC_Start_IT+0x1a4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a58      	ldr	r2, [pc, #352]	@ (8001478 <HAL_ADC_Start_IT+0x1a8>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9a      	lsrs	r2, r3, #18
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001324:	e002      	b.n	800132c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 8085 	bne.w	800144c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001380:	d106      	bne.n	8001390 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f023 0206 	bic.w	r2, r3, #6
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	@ 0x44
 800138e:	e002      	b.n	8001396 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <HAL_ADC_Start_IT+0x1ac>)
 80013a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013aa:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d12a      	bne.n	8001422 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001480 <HAL_ADC_Start_IT+0x1b0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d015      	beq.n	8001402 <HAL_ADC_Start_IT+0x132>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2a      	ldr	r2, [pc, #168]	@ (8001484 <HAL_ADC_Start_IT+0x1b4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d105      	bne.n	80013ec <HAL_ADC_Start_IT+0x11c>
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_ADC_Start_IT+0x1ac>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00a      	beq.n	8001402 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a25      	ldr	r2, [pc, #148]	@ (8001488 <HAL_ADC_Start_IT+0x1b8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d136      	bne.n	8001464 <HAL_ADC_Start_IT+0x194>
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <HAL_ADC_Start_IT+0x1ac>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d130      	bne.n	8001464 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d129      	bne.n	8001464 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e020      	b.n	8001464 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <HAL_ADC_Start_IT+0x1b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d11b      	bne.n	8001464 <HAL_ADC_Start_IT+0x194>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d114      	bne.n	8001464 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	e00b      	b.n	8001464 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000004 	.word	0x20000004
 8001478:	431bde83 	.word	0x431bde83
 800147c:	40012300 	.word	0x40012300
 8001480:	40012000 	.word	0x40012000
 8001484:	40012100 	.word	0x40012100
 8001488:	40012200 	.word	0x40012200

0800148c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d049      	beq.n	8001556 <HAL_ADC_IRQHandler+0xca>
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d046      	beq.n	8001556 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d12b      	bne.n	8001546 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d127      	bne.n	8001546 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150e:	2b00      	cmp	r3, #0
 8001510:	d119      	bne.n	8001546 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0220 	bic.w	r2, r2, #32
 8001520:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fb74 	bl	8000c34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f06f 0212 	mvn.w	r2, #18
 8001554:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d057      	beq.n	800161c <HAL_ADC_IRQHandler+0x190>
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d054      	beq.n	800161c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d139      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d12b      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d124      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11d      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d119      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fa8d 	bl	8001b2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f06f 020c 	mvn.w	r2, #12
 800161a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d017      	beq.n	8001662 <HAL_ADC_IRQHandler+0x1d6>
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10d      	bne.n	8001662 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f837 	bl	80016c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f06f 0201 	mvn.w	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001670:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x218>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f043 0202 	orr.w	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f06f 0220 	mvn.w	r2, #32
 8001692:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f820 	bl	80016da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f06f 0220 	mvn.w	r2, #32
 80016a2:	601a      	str	r2, [r3, #0]
  }
}
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e105      	b.n	8001918 <HAL_ADC_ConfigChannel+0x228>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d925      	bls.n	8001768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1e      	subs	r3, #30
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	4603      	mov	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4403      	add	r3, r0
 800175a:	3b1e      	subs	r3, #30
 800175c:	409a      	lsls	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e022      	b.n	80017ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	2207      	movs	r2, #7
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4403      	add	r3, r0
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d824      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b05      	subs	r3, #5
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	400a      	ands	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fe:	e04c      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d824      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b23      	subs	r3, #35	@ 0x23
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	@ 0x23
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001850:	e023      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b41      	subs	r3, #65	@ 0x41
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	@ 0x41
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <HAL_ADC_ConfigChannel+0x234>)
 800189c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d123      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d003      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x1e6>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b11      	cmp	r3, #17
 80018d4:	d11b      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d111      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_ADC_ConfigChannel+0x23c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HAL_ADC_ConfigChannel+0x240>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	40012000 	.word	0x40012000
 800192c:	20000004 	.word	0x20000004
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193c:	4b79      	ldr	r3, [pc, #484]	@ (8001b24 <ADC_Init+0x1f0>)
 800193e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	@ (8001b28 <ADC_Init+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff3e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff31 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fa3a 	bl	80011e8 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2280      	movs	r2, #128	@ 0x80
 8001d86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e052      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0216 	bic.w	r2, r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <HAL_DMA_Abort+0x62>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de4:	e013      	b.n	8001e0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de6:	f7ff f9ff 	bl	80011e8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d90c      	bls.n	8001e0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e015      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e4      	bne.n	8001de6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e20:	223f      	movs	r2, #63	@ 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2280      	movs	r2, #128	@ 0x80
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e00c      	b.n	8001e7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2205      	movs	r2, #5
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e16b      	b.n	800217c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 815a 	bne.w	8002176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d130      	bne.n	8001f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d017      	beq.n	8001f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d123      	bne.n	8001fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80b4 	beq.w	8002176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b60      	ldr	r3, [pc, #384]	@ (8002194 <HAL_GPIO_Init+0x30c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	4a5f      	ldr	r2, [pc, #380]	@ (8002194 <HAL_GPIO_Init+0x30c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201c:	6453      	str	r3, [r2, #68]	@ 0x44
 800201e:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_GPIO_Init+0x30c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202a:	4a5b      	ldr	r2, [pc, #364]	@ (8002198 <HAL_GPIO_Init+0x310>)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_GPIO_Init+0x314>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <HAL_GPIO_Init+0x226>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a51      	ldr	r2, [pc, #324]	@ (80021a0 <HAL_GPIO_Init+0x318>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d025      	beq.n	80020aa <HAL_GPIO_Init+0x222>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a50      	ldr	r2, [pc, #320]	@ (80021a4 <HAL_GPIO_Init+0x31c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_GPIO_Init+0x21e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x21a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4e      	ldr	r2, [pc, #312]	@ (80021ac <HAL_GPIO_Init+0x324>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x216>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4d      	ldr	r2, [pc, #308]	@ (80021b0 <HAL_GPIO_Init+0x328>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x212>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4c      	ldr	r2, [pc, #304]	@ (80021b4 <HAL_GPIO_Init+0x32c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x20e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4b      	ldr	r2, [pc, #300]	@ (80021b8 <HAL_GPIO_Init+0x330>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x20a>
 800208e:	2307      	movs	r3, #7
 8002090:	e00e      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 8002092:	2308      	movs	r3, #8
 8002094:	e00c      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 8002096:	2306      	movs	r3, #6
 8002098:	e00a      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 800209a:	2305      	movs	r3, #5
 800209c:	e008      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 800209e:	2304      	movs	r3, #4
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x228>
 80020ae:	2300      	movs	r3, #0
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4093      	lsls	r3, r2
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c0:	4935      	ldr	r1, [pc, #212]	@ (8002198 <HAL_GPIO_Init+0x310>)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ce:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <HAL_GPIO_Init+0x334>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f2:	4a32      	ldr	r2, [pc, #200]	@ (80021bc <HAL_GPIO_Init+0x334>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <HAL_GPIO_Init+0x334>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_GPIO_Init+0x334>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <HAL_GPIO_Init+0x334>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <HAL_GPIO_Init+0x334>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_GPIO_Init+0x334>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002170:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <HAL_GPIO_Init+0x334>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	f67f ae90 	bls.w	8001ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40021400 	.word	0x40021400
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40021c00 	.word	0x40021c00
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800220c:	e003      	b.n	8002216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	041a      	lsls	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	619a      	str	r2, [r3, #24]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e267      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002242:	4b88      	ldr	r3, [pc, #544]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b85      	ldr	r3, [pc, #532]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b7e      	ldr	r3, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e242      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b69      	ldr	r3, [pc, #420]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe ff84 	bl	80011e8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe ff80 	bl	80011e8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e207      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe ff70 	bl	80011e8 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe ff6c 	bl	80011e8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1f3      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800233a:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c7      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4937      	ldr	r1, [pc, #220]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe ff25 	bl	80011e8 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe ff21 	bl	80011e8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a8      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4925      	ldr	r1, [pc, #148]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff04 	bl	80011e8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe ff00 	bl	80011e8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e187      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d036      	beq.n	800247c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fee4 	bl	80011e8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fee0 	bl	80011e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e167      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e01b      	b.n	800247c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fecd 	bl	80011e8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e00e      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe fec9 	bl	80011e8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d907      	bls.n	8002470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e150      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002464:	40023800 	.word	0x40023800
 8002468:	42470000 	.word	0x42470000
 800246c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ea      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8097 	beq.w	80025b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b81      	ldr	r3, [pc, #516]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b7d      	ldr	r3, [pc, #500]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b74      	ldr	r3, [pc, #464]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a73      	ldr	r2, [pc, #460]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe89 	bl	80011e8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fe85 	bl	80011e8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e10c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x2ea>
 8002500:	4b64      	ldr	r3, [pc, #400]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a63      	ldr	r2, [pc, #396]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
 800250c:	e01c      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x30c>
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 8002530:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
 800253c:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	4a54      	ldr	r2, [pc, #336]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fe4a 	bl	80011e8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fe46 	bl	80011e8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0cb      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ee      	beq.n	8002558 <HAL_RCC_OscConfig+0x334>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe fe34 	bl	80011e8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe fe30 	bl	80011e8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b5      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ee      	bne.n	8002584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	4a38      	ldr	r2, [pc, #224]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a1 	beq.w	8002704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c2:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d05c      	beq.n	8002688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d141      	bne.n	800265a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe04 	bl	80011e8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fe00 	bl	80011e8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e087      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	491b      	ldr	r1, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fdd9 	bl	80011e8 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fdd5 	bl	80011e8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e05c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x416>
 8002658:	e054      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fdc2 	bl	80011e8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fdbe 	bl	80011e8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e045      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e038      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x4ec>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d121      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11a      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fcf0 	bl	80011e8 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fcec 	bl	80011e8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fc50 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	080042e8 	.word	0x080042e8
 80028d8:	20000004 	.word	0x20000004
 80028dc:	20000008 	.word	0x20000008

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b094      	sub	sp, #80	@ 0x50
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80e1 	bhi.w	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0db      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002918:	e0db      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800291c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291e:	e0d8      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002928:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	2200      	movs	r2, #0
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002940:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
 800294e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4621      	mov	r1, r4
 800296c:	1a51      	subs	r1, r2, r1
 800296e:	6139      	str	r1, [r7, #16]
 8002970:	4629      	mov	r1, r5
 8002972:	eb63 0301 	sbc.w	r3, r3, r1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002984:	4659      	mov	r1, fp
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298e:	4651      	mov	r1, sl
 8002990:	018a      	lsls	r2, r1, #6
 8002992:	4651      	mov	r1, sl
 8002994:	ebb2 0801 	subs.w	r8, r2, r1
 8002998:	4659      	mov	r1, fp
 800299a:	eb63 0901 	sbc.w	r9, r3, r1
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b2:	4690      	mov	r8, r2
 80029b4:	4699      	mov	r9, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	eb18 0303 	adds.w	r3, r8, r3
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	462b      	mov	r3, r5
 80029c0:	eb49 0303 	adc.w	r3, r9, r3
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029d2:	4629      	mov	r1, r5
 80029d4:	024b      	lsls	r3, r1, #9
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029dc:	4621      	mov	r1, r4
 80029de:	024a      	lsls	r2, r1, #9
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029f0:	f7fd fbea 	bl	80001c8 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4613      	mov	r3, r2
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029fc:	e058      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	4611      	mov	r1, r2
 8002a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0159      	lsls	r1, r3, #5
 8002a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2a:	0150      	lsls	r0, r2, #5
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4641      	mov	r1, r8
 8002a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a50:	ebb2 040a 	subs.w	r4, r2, sl
 8002a54:	eb63 050b 	sbc.w	r5, r3, fp
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	00eb      	lsls	r3, r5, #3
 8002a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a66:	00e2      	lsls	r2, r4, #3
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	18e3      	adds	r3, r4, r3
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	464b      	mov	r3, r9
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	61fa      	str	r2, [r7, #28]
 8002aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa4:	f7fd fb90 	bl	80001c8 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3750      	adds	r7, #80	@ 0x50
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	080042f8 	.word	0x080042f8

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080042f8 	.word	0x080042f8

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e041      	b.n	8002bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f9a8 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 f9de 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e046      	b.n	8002c9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_TIM_Base_Start+0xb4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d022      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c26:	d01d      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cac <HAL_TIM_Base_Start+0xb8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d018      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_TIM_Base_Start+0xbc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_TIM_Base_Start+0xc0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00e      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_TIM_Base_Start+0xc4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d009      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <HAL_TIM_Base_Start+0xc8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_TIM_Base_Start+0x70>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a18      	ldr	r2, [pc, #96]	@ (8002cc0 <HAL_TIM_Base_Start+0xcc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d111      	bne.n	8002c88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d010      	beq.n	8002c98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c86:	e007      	b.n	8002c98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40000c00 	.word	0x40000c00
 8002cb8:	40010400 	.word	0x40010400
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40001800 	.word	0x40001800

08002cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10f      	bne.n	8002d0c <HAL_TIM_Base_Stop_IT+0x48>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_TIM_Base_Stop_IT+0x48>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01b      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f06f 0202 	mvn.w	r2, #2
 8002d56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8d2 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002d72:	e005      	b.n	8002d80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8c4 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8d5 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01b      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f06f 0204 	mvn.w	r2, #4
 8002da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8ac 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002dbe:	e005      	b.n	8002dcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f89e 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8af 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01b      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0208 	mvn.w	r2, #8
 8002dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2204      	movs	r2, #4
 8002df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f886 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002e0a:	e005      	b.n	8002e18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f878 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f889 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01b      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0210 	mvn.w	r2, #16
 8002e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f860 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002e56:	e005      	b.n	8002e64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f852 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f863 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0201 	mvn.w	r2, #1
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd ff69 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f983 	bl	80031b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00c      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f834 	bl	8002f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0220 	mvn.w	r2, #32
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f955 	bl	80031a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a46      	ldr	r2, [pc, #280]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d00f      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a43      	ldr	r2, [pc, #268]	@ (8003084 <TIM_Base_SetConfig+0x130>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a42      	ldr	r2, [pc, #264]	@ (8003088 <TIM_Base_SetConfig+0x134>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a41      	ldr	r2, [pc, #260]	@ (800308c <TIM_Base_SetConfig+0x138>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d027      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a32      	ldr	r2, [pc, #200]	@ (8003084 <TIM_Base_SetConfig+0x130>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d023      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	@ (8003088 <TIM_Base_SetConfig+0x134>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a30      	ldr	r2, [pc, #192]	@ (800308c <TIM_Base_SetConfig+0x138>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d017      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <TIM_Base_SetConfig+0x140>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <TIM_Base_SetConfig+0x144>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00f      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <TIM_Base_SetConfig+0x148>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <TIM_Base_SetConfig+0x14c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80030a4 <TIM_Base_SetConfig+0x150>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a29      	ldr	r2, [pc, #164]	@ (80030a8 <TIM_Base_SetConfig+0x154>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d103      	bne.n	8003054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]
  }
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40010400 	.word	0x40010400
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800
 80030a0:	40001800 	.word	0x40001800
 80030a4:	40001c00 	.word	0x40001c00
 80030a8:	40002000 	.word	0x40002000

080030ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e05a      	b.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a21      	ldr	r2, [pc, #132]	@ (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d01d      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1d      	ldr	r2, [pc, #116]	@ (800318c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1b      	ldr	r2, [pc, #108]	@ (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10c      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40010400 	.word	0x40010400
 800319c:	40014000 	.word	0x40014000
 80031a0:	40001800 	.word	0x40001800

080031a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e042      	b.n	8003264 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd feaa 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	@ 0x24
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800320e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fdbd 	bl	8003d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	@ 0x28
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	d175      	bne.n	8003378 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_UART_Transmit+0x2c>
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e06e      	b.n	800337a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2221      	movs	r2, #33	@ 0x21
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032aa:	f7fd ff9d 	bl	80011e8 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c4:	d108      	bne.n	80032d8 <HAL_UART_Transmit+0x6c>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e003      	b.n	80032e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032e0:	e02e      	b.n	8003340 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fb1f 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e03a      	b.n	800337a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	3302      	adds	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	e007      	b.n	8003332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	3301      	adds	r3, #1
 8003330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1cb      	bne.n	80032e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	2140      	movs	r1, #64	@ 0x40
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 faeb 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e006      	b.n	800337a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	4613      	mov	r3, r2
 800338e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	d112      	bne.n	80033c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_UART_Receive_IT+0x26>
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e00b      	b.n	80033c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fb12 	bl	80039e2 <UART_Start_Receive_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	e000      	b.n	80033c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b0ba      	sub	sp, #232	@ 0xe8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800340a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_UART_IRQHandler+0x66>
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fbf2 	bl	8003c14 <UART_Receive_IT>
      return;
 8003430:	e25b      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80de 	beq.w	80035f8 <HAL_UART_IRQHandler+0x22c>
 800343c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80d1 	beq.w	80035f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_UART_IRQHandler+0xae>
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_UART_IRQHandler+0xd2>
 8003486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_UART_IRQHandler+0xf6>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d011      	beq.n	80034f2 <HAL_UART_IRQHandler+0x126>
 80034ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f043 0208 	orr.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 81f2 	beq.w	80038e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_UART_IRQHandler+0x14e>
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb7d 	bl	8003c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_UART_IRQHandler+0x17a>
 800353e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d04f      	beq.n	80035e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa85 	bl	8003a56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	d141      	bne.n	80035de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003586:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800358a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800359e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1d9      	bne.n	800355a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d013      	beq.n	80035d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ac <HAL_UART_IRQHandler+0x3e0>)
 80035b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fc41 	bl	8001e42 <HAL_DMA_Abort_IT>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035d0:	4610      	mov	r0, r2
 80035d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e00e      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f994 	bl	8003904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e00a      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f990 	bl	8003904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e006      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f98c 	bl	8003904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80035f2:	e175      	b.n	80038e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	bf00      	nop
    return;
 80035f6:	e173      	b.n	80038e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f040 814f 	bne.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8148 	beq.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8141 	beq.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	f040 80b6 	bne.w	80037b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8145 	beq.w	80038e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800365e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003662:	429a      	cmp	r2, r3
 8003664:	f080 813e 	bcs.w	80038e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800366e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367a:	f000 8088 	beq.w	800378e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1d9      	bne.n	800367e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3314      	adds	r3, #20
 80036ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e1      	bne.n	80036ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800372a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800372c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e3      	bne.n	8003706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800375c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375e:	f023 0310 	bic.w	r3, r3, #16
 8003762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003770:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003772:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800377e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e3      	bne.n	800374c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe faea 	bl	8001d62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8b7 	bl	8003918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037aa:	e09b      	b.n	80038e4 <HAL_UART_IRQHandler+0x518>
 80037ac:	08003b1d 	.word	0x08003b1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 808e 	beq.w	80038e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8089 	beq.w	80038e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	623b      	str	r3, [r7, #32]
   return(result);
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003832:	633a      	str	r2, [r7, #48]	@ 0x30
 8003834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e3      	bne.n	800380e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60fb      	str	r3, [r7, #12]
   return(result);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003878:	61fa      	str	r2, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	617b      	str	r3, [r7, #20]
   return(result);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e3      	bne.n	8003854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f83d 	bl	8003918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800389e:	e023      	b.n	80038e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <HAL_UART_IRQHandler+0x4f4>
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f943 	bl	8003b44 <UART_Transmit_IT>
    return;
 80038be:	e014      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <HAL_UART_IRQHandler+0x51e>
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f983 	bl	8003be4 <UART_EndTransmit_IT>
    return;
 80038de:	e004      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
    return;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
      return;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
      return;
 80038e8:	bf00      	nop
  }
}
 80038ea:	37e8      	adds	r7, #232	@ 0xe8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003940:	e03b      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d037      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fd fc4d 	bl	80011e8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <UART_WaitOnFlagUntilTimeout+0x30>
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e03a      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d023      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b80      	cmp	r3, #128	@ 0x80
 8003976:	d020      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d01d      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d116      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f857 	bl	8003a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2208      	movs	r2, #8
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d0b4      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2222      	movs	r2, #34	@ 0x22
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0220 	orr.w	r2, r2, #32
 8003a46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b095      	sub	sp, #84	@ 0x54
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d119      	bne.n	8003b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aee:	61ba      	str	r2, [r7, #24]
 8003af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	613b      	str	r3, [r7, #16]
   return(result);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b10:	bf00      	nop
 8003b12:	3754      	adds	r7, #84	@ 0x54
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff fee4 	bl	8003904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b21      	cmp	r3, #33	@ 0x21
 8003b56:	d13e      	bne.n	8003bd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b60:	d114      	bne.n	8003b8c <UART_Transmit_IT+0x48>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d110      	bne.n	8003b8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]
 8003b8a:	e008      	b.n	8003b9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	1c59      	adds	r1, r3, #1
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6211      	str	r1, [r2, #32]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4619      	mov	r1, r3
 8003bac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fe73 	bl	80038f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	@ 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b22      	cmp	r3, #34	@ 0x22
 8003c26:	f040 80ae 	bne.w	8003d86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c32:	d117      	bne.n	8003c64 <UART_Receive_IT+0x50>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d113      	bne.n	8003c64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c62:	e026      	b.n	8003cb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c76:	d007      	beq.n	8003c88 <UART_Receive_IT+0x74>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <UART_Receive_IT+0x82>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e008      	b.n	8003ca8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d15d      	bne.n	8003d82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0220 	bic.w	r2, r2, #32
 8003cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d135      	bne.n	8003d78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	613b      	str	r3, [r7, #16]
   return(result);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d32:	623a      	str	r2, [r7, #32]
 8003d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	69f9      	ldr	r1, [r7, #28]
 8003d38:	6a3a      	ldr	r2, [r7, #32]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d10a      	bne.n	8003d6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fdd1 	bl	8003918 <HAL_UARTEx_RxEventCallback>
 8003d76:	e002      	b.n	8003d7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fc ff9b 	bl	8000cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e002      	b.n	8003d88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	@ 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b0c0      	sub	sp, #256	@ 0x100
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	ea40 0301 	orr.w	r3, r0, r1
 8003db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003de8:	f021 010c 	bic.w	r1, r1, #12
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003df6:	430b      	orrs	r3, r1
 8003df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	6999      	ldr	r1, [r3, #24]
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	ea40 0301 	orr.w	r3, r0, r1
 8003e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800405c <UART_SetConfig+0x2cc>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d005      	beq.n	8003e30 <UART_SetConfig+0xa0>
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004060 <UART_SetConfig+0x2d0>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d104      	bne.n	8003e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7fe fe7c 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e38:	e003      	b.n	8003e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e3a:	f7fe fe63 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8003e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4c:	f040 810c 	bne.w	8004068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e72:	4621      	mov	r1, r4
 8003e74:	eb12 0801 	adds.w	r8, r2, r1
 8003e78:	4629      	mov	r1, r5
 8003e7a:	eb43 0901 	adc.w	r9, r3, r1
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e92:	4690      	mov	r8, r2
 8003e94:	4699      	mov	r9, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	eb18 0303 	adds.w	r3, r8, r3
 8003e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	eb49 0303 	adc.w	r3, r9, r3
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	18db      	adds	r3, r3, r3
 8003ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	eb42 0303 	adc.w	r3, r2, r3
 8003eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ed4:	f7fc f978 	bl	80001c8 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4b61      	ldr	r3, [pc, #388]	@ (8004064 <UART_SetConfig+0x2d4>)
 8003ede:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	011c      	lsls	r4, r3, #4
 8003ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	464b      	mov	r3, r9
 8003efc:	1891      	adds	r1, r2, r2
 8003efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f00:	415b      	adcs	r3, r3
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f08:	4641      	mov	r1, r8
 8003f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb43 0b01 	adc.w	fp, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f28:	4692      	mov	sl, r2
 8003f2a:	469b      	mov	fp, r3
 8003f2c:	4643      	mov	r3, r8
 8003f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f36:	464b      	mov	r3, r9
 8003f38:	eb4b 0303 	adc.w	r3, fp, r3
 8003f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f54:	460b      	mov	r3, r1
 8003f56:	18db      	adds	r3, r3, r3
 8003f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	eb42 0303 	adc.w	r3, r2, r3
 8003f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f6a:	f7fc f92d 	bl	80001c8 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	4b3b      	ldr	r3, [pc, #236]	@ (8004064 <UART_SetConfig+0x2d4>)
 8003f76:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2264      	movs	r2, #100	@ 0x64
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	1acb      	subs	r3, r1, r3
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f8a:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <UART_SetConfig+0x2d4>)
 8003f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f98:	441c      	add	r4, r3
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	1891      	adds	r1, r2, r2
 8003fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fb4:	415b      	adcs	r3, r3
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	1851      	adds	r1, r2, r1
 8003fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	414b      	adcs	r3, r1
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	00cb      	lsls	r3, r1, #3
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fde:	4651      	mov	r1, sl
 8003fe0:	00ca      	lsls	r2, r1, #3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4642      	mov	r2, r8
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	eb42 0303 	adc.w	r3, r2, r3
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800400c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004010:	460b      	mov	r3, r1
 8004012:	18db      	adds	r3, r3, r3
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004016:	4613      	mov	r3, r2
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800401e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004026:	f7fc f8cf 	bl	80001c8 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <UART_SetConfig+0x2d4>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	@ 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3332      	adds	r3, #50	@ 0x32
 8004042:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <UART_SetConfig+0x2d4>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 0207 	and.w	r2, r3, #7
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4422      	add	r2, r4
 8004056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004058:	e106      	b.n	8004268 <UART_SetConfig+0x4d8>
 800405a:	bf00      	nop
 800405c:	40011000 	.word	0x40011000
 8004060:	40011400 	.word	0x40011400
 8004064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800407a:	4642      	mov	r2, r8
 800407c:	464b      	mov	r3, r9
 800407e:	1891      	adds	r1, r2, r2
 8004080:	6239      	str	r1, [r7, #32]
 8004082:	415b      	adcs	r3, r3
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800408a:	4641      	mov	r1, r8
 800408c:	1854      	adds	r4, r2, r1
 800408e:	4649      	mov	r1, r9
 8004090:	eb43 0501 	adc.w	r5, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	00eb      	lsls	r3, r5, #3
 800409e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a2:	00e2      	lsls	r2, r4, #3
 80040a4:	4614      	mov	r4, r2
 80040a6:	461d      	mov	r5, r3
 80040a8:	4643      	mov	r3, r8
 80040aa:	18e3      	adds	r3, r4, r3
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b0:	464b      	mov	r3, r9
 80040b2:	eb45 0303 	adc.w	r3, r5, r3
 80040b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040d6:	4629      	mov	r1, r5
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e0:	4621      	mov	r1, r4
 80040e2:	008a      	lsls	r2, r1, #2
 80040e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040e8:	f7fc f86e 	bl	80001c8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4b60      	ldr	r3, [pc, #384]	@ (8004274 <UART_SetConfig+0x4e4>)
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	011c      	lsls	r4, r3, #4
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	61b9      	str	r1, [r7, #24]
 8004114:	415b      	adcs	r3, r3
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411c:	4641      	mov	r1, r8
 800411e:	1851      	adds	r1, r2, r1
 8004120:	6139      	str	r1, [r7, #16]
 8004122:	4649      	mov	r1, r9
 8004124:	414b      	adcs	r3, r1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004134:	4659      	mov	r1, fp
 8004136:	00cb      	lsls	r3, r1, #3
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413e:	4651      	mov	r1, sl
 8004140:	00ca      	lsls	r2, r1, #3
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	4603      	mov	r3, r0
 8004148:	4642      	mov	r2, r8
 800414a:	189b      	adds	r3, r3, r2
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004150:	464b      	mov	r3, r9
 8004152:	460a      	mov	r2, r1
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004174:	4649      	mov	r1, r9
 8004176:	008b      	lsls	r3, r1, #2
 8004178:	4641      	mov	r1, r8
 800417a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800417e:	4641      	mov	r1, r8
 8004180:	008a      	lsls	r2, r1, #2
 8004182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004186:	f7fc f81f 	bl	80001c8 <__aeabi_uldivmod>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4611      	mov	r1, r2
 8004190:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <UART_SetConfig+0x4e4>)
 8004192:	fba3 2301 	umull	r2, r3, r3, r1
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	2264      	movs	r2, #100	@ 0x64
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	1acb      	subs	r3, r1, r3
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	3332      	adds	r3, #50	@ 0x32
 80041a4:	4a33      	ldr	r2, [pc, #204]	@ (8004274 <UART_SetConfig+0x4e4>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b0:	441c      	add	r4, r3
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b6:	2200      	movs	r2, #0
 80041b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80041bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	415b      	adcs	r3, r3
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d0:	4641      	mov	r1, r8
 80041d2:	1851      	adds	r1, r2, r1
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	4649      	mov	r1, r9
 80041d8:	414b      	adcs	r3, r1
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041e8:	4659      	mov	r1, fp
 80041ea:	00cb      	lsls	r3, r1, #3
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f2:	4651      	mov	r1, sl
 80041f4:	00ca      	lsls	r2, r1, #3
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	4642      	mov	r2, r8
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004202:	464b      	mov	r3, r9
 8004204:	460a      	mov	r2, r1
 8004206:	eb42 0303 	adc.w	r3, r2, r3
 800420a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	663b      	str	r3, [r7, #96]	@ 0x60
 8004216:	667a      	str	r2, [r7, #100]	@ 0x64
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004224:	4649      	mov	r1, r9
 8004226:	008b      	lsls	r3, r1, #2
 8004228:	4641      	mov	r1, r8
 800422a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800422e:	4641      	mov	r1, r8
 8004230:	008a      	lsls	r2, r1, #2
 8004232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004236:	f7fb ffc7 	bl	80001c8 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <UART_SetConfig+0x4e4>)
 8004240:	fba3 1302 	umull	r1, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	2164      	movs	r1, #100	@ 0x64
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	3332      	adds	r3, #50	@ 0x32
 8004252:	4a08      	ldr	r2, [pc, #32]	@ (8004274 <UART_SetConfig+0x4e4>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4422      	add	r2, r4
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800426e:	46bd      	mov	sp, r7
 8004270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004274:	51eb851f 	.word	0x51eb851f

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	@ (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	@ (80042cc <__libc_init_array+0x44>)
 800429c:	f000 f818 	bl	80042d0 <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08004308 	.word	0x08004308
 80042c4:	08004308 	.word	0x08004308
 80042c8:	08004308 	.word	0x08004308
 80042cc:	0800430c 	.word	0x0800430c

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
